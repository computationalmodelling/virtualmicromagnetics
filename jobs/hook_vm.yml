---
# This Ansible playbook outlines actions taken on the host machine on the
# virtual machine after the virtual machine is provisioned. It is included in
# the create_VM playbook.

- name: Set the location to look for and place build artefacts, and whether or not to clobber the output files.
  set_fact:
    artefact_dir: "{{ root_dir }}/artefacts/"
    clobber_output: false

- name: Ensure that a directory is created for build artefacts.
  file:
    name={{ artefact_dir }}
    state=directory

# current_version is defined in the create_VM playbook.
- name: Define the name used for output files, sans extension.
  set_fact:
    output_name: "{{ vm_name }}-{{ current_version.stdout }}"

# We can skip the creation of the zipped VHD if it already exists (for
# idempotency). Hence we check for the ZIP here and, if it is found, other
# creation tasks are not run. Likewise for the box. User can override this
# setting by setting clobber_output to true.

- name: Define the name used for the ZIP output file, with extension.
  set_fact:
    output_zip: "{{ output_name }}-vhd.zip"

- name: Define the name used for the box output file, with extension.
  set_fact:
    output_box: "{{ output_name }}.box"

- name: Determine whether or not the ZIP is already built.
  stat:
    path={{ artefact_dir }}/{{ output_zip }}
  register: zip_status

- name: Determine whether or not the box is already built.
  stat:
    path={{ artefact_dir }}/{{ output_box }}
  register: box_status

# Determine whether or not an inbuilt Vagrantfile is supplied. If it is, we
# package the box with it. Otherwise, we package the box without an in-built
# Vagrantfile.
#
# By the way, "isreg" means "is a regular file?".

- name: Define the path for in-built Vagrantfiles.
  set_fact:
    inbuilt_vagrantfile_path: "{{ root_dir }}/guest_resources/vagrantfiles"

- name: Determine whether or not a builtin Vagrantfile exists for this target.
  stat:
    path: "{{ inbuilt_vagrantfile_path }}/Vagrantfile_{{ vm_name }}_builtin"
  register: vagrantfile

- name: Create box file using Vagrant, and include a built-in Vagrant file if it exists.
  command: vagrant package --output {{ artefact_dir }}/{{ output_box }} --vagrantfile {{ inbuilt_vagrantfile_path }}/Vagrantfile_{{ vm_name }}_builtin
    chdir={{ vm_dir }}
    creates={{ artefact_dir }}/{{ output_box }}
  when: vagrantfile.stat.exists and (not box_status.stat.exists or (box_status.stat.isreg and clobber_output))

- name: Create box file using Vagrant without a built-in Vagrant file if it is absent.
  command: vagrant package --output {{ artefact_dir }}/{{ output_box }}
    chdir={{ vm_dir }}
    creates={{ artefact_dir }}/{{ output_box }}
  when: (not vagrantfile.stat.exists) and (not box_status.stat.exists or (box_status.stat.isreg and clobber_output))

- name: Destroy the virtual machine.
  command: vagrant destroy --force
    chdir={{ vm_dir }}

- name: Inform the user that the Vagrant box has been created.
  debug:
    msg="Virtual machine '{{ vm_name }}' has been successfully created, and build artefacts are in {{ artefact_dir }}."

# Attempt to create a virtual machine with this new box. This simulates the
# user's run process.

- name: Define directory to perform checks on the new box.
  set_fact:
    run_dir: "/tmp/{{ vm_name }}-test/"

- name: Create directory to perform checks on the new box.
  file:
    name={{ run_dir }}
    state=directory

- name: Check the status of a Vagrant environment in this directory, and store it.
  command: vagrant status
    chdir={{ run_dir }}
  register: test_env_status
  changed_when: false
  ignore_errors: yes

- name: Destroy the test virtual machine if its status suggests it exists.
  command: vagrant destroy --force
    chdir={{ vm_dir }}
  when: not "not created" in test_env_status.stdout

- name: Remove existing Vagrantfile in test directory, if any.
  file:
    name={{ run_dir }}/Vagrantfile
    state=absent

- name: Copy box to the test directory.
  command: cp {{ artefact_dir }}/{{ output_box }} {{ run_dir }}/testbox.box
    creates={{ run_dir }}/testbox.box

- name: Create a Vagrant environment with the new box, without GUI.
  shell: |
    printf "\nVagrant.configure(2) do |config|\n  config.vm.box = \"testbox.box\"\n  config.vm.provider \"virtualbox\" do |vb|\n    vb.gui = false\n  end\nend" > {{ run_dir }}/Vagrantfile
    chdir={{ run_dir }}

- name: Use the new Vagrant box to create a virtual machine, mimicing the user run process.
  command: vagrant up --provider virtualbox
    chdir={{ run_dir }}

- name: Clean the test environment (1/2).
  command: vagrant destroy --force
    chdir={{ run_dir }}

- name: Clean the test environment (2/2).
  file:
    name={{ run_dir }}
    state=absent
