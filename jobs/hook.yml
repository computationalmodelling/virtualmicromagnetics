---
# This Ansible playbook outlines actions taken on the host machine on the
# virtual machine after the virtual machine is provisioned. It is included in
# the create_VM playbook.

- name: Set the location to look for and place build artefacts, and whether or not to clobber the output files.
  set_fact:
    artefact_dir: "{{ vm_dir }}/../../artefacts/"
    clobber_output: false

- name: Ensure that a directory is created for build artefacts.
  file:
    name={{ artefact_dir }}
    state=directory

- name: Get current repository version.
  command: git rev-parse HEAD
  register: current_revision

- name: Define the name used for output files, sans extension.
  set_fact:
    output_name: "{{ vm_name }}-{{ current_revision.stdout }}"

# We can skip the creation of the zipped VHD if it already exists (for
# idempotency). Hence we check for the ZIP here and, if it is found, other
# creation tasks are not run. Likewise for the box. User can override this
# setting by setting clobber_output to true.

- name: Define the name used for the ZIP output file, with extension.
  set_fact:
    output_zip: "{{ output_name }}-vhd.zip"

- name: Define the name used for the box output file, with extension.
  set_fact:
    output_box: "{{ output_name }}.box"

- name: Determine whether or not the ZIP is already built.
  stat:
    path={{ artefact_dir }}/{{ output_zip }}
  register: zip_status

- name: Determine whether or not the box is already built.
  stat:
    path={{ artefact_dir }}/{{ output_box }}
  register: box_status

# Determine whether or not an inbuilt Vagrantfile is supplied. If it is, we
# package the box with it. Otherwise, we package the box without an in-built
# Vagrantfile.
#
# By the way, "isreg" means "is a regular file?".

- name: Define the path for in-built Vagrantfiles.
  set_fact:
    inbuilt_vagrantfile_path = ../../guest_resources/vagrantfiles

- name: Determine whether or not a builtin Vagrantfile exists for this target.
  stat:
    path: "{{ inbuilt_vagrantfile_path }}/Vagrantfile_{{ vm_name }}_builtin"
  register: vagrantfile

- name: Create box file using vagrant, and include a built-in Vagrant file if it exists.
  command: vagrant package --output {{ artefact_dir }}/{{ output_box }} --vagrantfile {{ inbuilt_vagrantfile_path }}/Vagrantfile_{{ vm_name }}_builtin
    chdir={{ vm_dir }}
    creates={{ artefact_dir }}/{{ output_box }}
  when: vagrantfile.stat.isreg and (not box_status.stat.exists or (box_status.stat.isreg and clobber_output))

- name: Create box file using vagrant without a built-in Vagrant file if it is absent.
  command: vagrant package --output {{ artefact_dir }}/{{ output_box }}
    chdir={{ vm_dir }}
    creates={{ artefact_dir }}/{{ output_box }}
  when: (not vagrantfile.stat.isreg) and (not box_status.stat.exists or (box_status.stat.isreg and clobber_output))

- name: Extract the virtual machine disk (VMDK) file from the box.
  command: tar -xvf {{ output_box }} -C {{ artefact_dir }} ./box-disk1.vmdk
    chdir={{ artefact_dir }}
    creates={{ artefact_dir }}/box-disk1.vmdk
  when: not zip_status.stat.exists or (zip_status.stat.isreg and clobber_output)

- name: Convert the virtual machine disk (VMDK) to a virtual hard disk (VHD).
  command: VBoxManage clonehd --format VHD box-disk1.vmdk {{ output_name }}.vhd
    chdir={{ artefact_dir }}
    creates={{ artefact_dir }}/{{ output_name }}.vhd
  when: not zip_status.stat.exists or (zip_status.stat.isreg and clobber_output)

- name: Remove the virtual machine disk (VMDK).
  file:
    path={{ artefact_dir }}/box-disk1.vmdk
    state=absent

- name: Compress the virtual hard disk (VHD) into a zip file with a readme.
  command: zip {{ output_zip }} {{ output_name }}.vhd ../guest_resources/zip_readme.txt
    chdir={{ artefact_dir }}
    creates={{ artefact_dir }}/{{ output_zip }}
  when: not zip_status.stat.exists or (zip_status.stat.isreg and clobber_output)

- name: Remove the virtual hard disk (VHD).
  file:
    path={{ artefact_dir }}/{{ output_name }}.vhd
    state=absent

- name: Destroy the virtual machine.
  command: vagrant destroy --force
    chdir={{ vm_dir }}

- name: Inform the user that the virtual hard disk has been created.
  debug:
    msg="Virtual machine '{{ vm_name }}' has been successfully created, and build artefacts are in {{ artefact_dir }}."